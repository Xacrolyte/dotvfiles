a = "jdnfkds jkfdsnfkds jndfks"
len(a)
b = 0
len(b)
b = '0'
len(b)
b = '01234567890'
len(b)
b = '0123456789dfew0'
len(b)
b = '0123456789'+'dfew0'
len(b)
b = '0123456789'+''+'dfew0'
len(b)
2 * 2 ** 2 + 2 - 2  
3 * 2 ** 2 + 2 - 2  
3 * 2 ** 2 + 2 * 2  
3 * 2 ** 2 + 2 * 2  // 4
(3 * 2 ** 2 + 2 * 2)  // 4
(3 * 2 ** 2 + 2 * 2)  % 4
a = 'hello'
len(a)
a = 'hello '
len(a)
a = ' hello '
len(a)
a = ' hello    '
len(a)
list = [0 ,[ 6, 3], [4, 6, [7, 5] ] ] *
list = [0 ,[ 6, 3], [4, 6, [7, 5] ] ] 
return list[2][len(list[2])-1][1]
return list[1][2]
import antigravity
l = [1,2,3,4,5]
index = 3
l[index:] + list[:index+3]
l[index:] + l[:index+3]
l[index:index+3]+list[:max(0,-1*(len(list)-index-3))]
l[index:index+3]+l[:max(0,-1*(len(list)-index-3))]
l[index:index+3]+l[:max(0,-1*(len(l)-index-3))]
l[index+3:]+list[:len(list)-index]
l[index+3:]+list[:len(l)-index]
l[index+3:]+l[:len(l)-index]
top
ls
word = "Hello World"
word[3]
word[2]
word[0]
len(word
len(word)
w = "Hello World"
w.count()
w.count("l")
w.count("w")
w.count("W")
w.find("W")
Proof of entry is not proof of its receipt or eligibility for the Sweepstakes; only submissions that have been received and verified by Sponsor (or its authorized representative) within the time specified may be eligible to receive an entry.  Participation and prize award are subject to verification and/or determination of all entrants, and any other information required by Sponsor in order to verify a winner.  Any suspected attempt by any entrant, directly or indirectly, to cheat, engage in fraud, to obtain unauthentic or fraudulent entries, ineligible or inaccurate or untimely submissions, as determined in Sponsor’s sole and absolute discretion, will void all such entries, and disqualify any entrant suspected of using/benefitting from such methods.  Without limiting the foregoing, Sponsor has the right to verify entrants’ eligibility and compliance with these Official Rules and, on the basis of its investigation, disqualify any entrant at any time during or after the Sweepstakes Period, and require immediate Prize return, if applicable.  Sweepstakes Entities assume no responsibility for lost, late, incomplete, inaccurate, delayed, destroyed, damaged, illegible, or misdirected entries (in whole or in part), and/or non-compliance.  Important:  If an entrant is participating via a mobile device, message
import os
os.system("Touch boy")
os.system("nano boy")
os.system("Touch boy")
import os
os.system("Touch boy")
os.system("touch boy")
ls
os.system("ls")
f = open("boy")
f.read()
f.read(1)
a = f.read()
print(a)
print("".a)
print("",a)
os.system("nano boy")
f = open("boy")
f.read(1)
f.read(3)
f.read(0)
f.read()
f.readline()
f.readlines()
f.readline(1)
f.read()
f = open("boy")
f.read()
f.readline(1)
f = open("boy")
f.readline(1)
f = open("boy")
f.readline()
f.readlines()
x = open("boy")
a = x.read()
print("a")
print("",a)
x 
x.readline(4)
x = open("boy")
x.readline(4)
for x in range(10,0):
	print(x)
x = open("nano", "w")
x.write("xxx")
x = open("nano.txt", "w")
x.write("xxx")
x = open("nano.txt", "w")
x.write("xxxxx")
x.write("xxxxxxxxxxxxx")
for x in range(0,-2):
	print (x)
a = 12121
a[1:]
a = "12121"
a[1:]
a[2:]
a[-2:]
a = 123456789
a = "123456789"
a[1:0]
a[1:]
a[5:]
a[-2:]
a[:9]
a[:7]
a[:-7]
a[:2]
a[::-1]
num = 371
digit = num % 10
digit
sum = 0 
sum = sum + (digit ** 3)
num = num // 10 
num
7*7*7
import antigravity
dict = [1:2]
import aqi
myaqi = aqi.to_
myaqi = aqi.to_aqi([
    (aqi.POLLUTANT_PM25, '12'),
    (aqi.POLLUTANT_PM10, '24'),
    (aqi.POLLUTANT_O3_8H, '0.087')
myaqi = aqi.to_aqi([(aqi.POLLUTANT_PM25, '12'),(aqi.POLLUTANT_PM10, '24')])
print(myaqi)
myaqi = aqi.to_aqi([(aqi.POLLUTANT_PM25, '12')])
myaqi
myaqi = aqi.to_aqi([(aqi.POLLUTANT_PM10, '24')])
myaqi
myaqi = aqi.to_aqi([(aqi.POLLUTANT_PM25, '31')])
myaqi
myaqi = aqi.to_oaqi([(aqi.POLLUTANT_PM25, '31',algo = aqi.ALGO_EPA)])
myaqi = aqi.to_oaqi([(aqi.POLLUTANT_PM25, '31', algo=aqi.ALGO_EPA)])
myaqi = aqi.to_oaqi((aqi.POLLUTANT_PM25, '31', algo=aqi.ALGO_EPA))
myaqi = aqi.to_iaqi(aqi.POLLUTANT_PM25, '12', algo=aqi.ALGO_EPA)
myaqi = aqi.to_iaqi(aqi.POLLUTANT_PM25, '31', algo=aqi.ALGO_EPA)
myaqi
myaqi = aqi.to_iaqi(aqi.POLLUTANT_PM25, '31', algo=aqi.ALGO_MEP)
myaqi
myaqi = aqi.to_aqi(aqi.POLLUTANT_PM25, '31', algo=)
myaqi = aqi.to_iaqi(aqi.POLLUTANT_PM25, '31', algo=aqi.ALGO_EPA)
myaqi
import aqi1
aqi_india(31,100)
aqi
python
git clone https://github.com/vipulgupta2048/insightsfx
import random
random.random
random.random()
random.random() * 100
random.randint() * 100
random.randint(0,13452300) 
random.randint(10000000,13452300) 
list = [0 ,[ 6, 3], [4, 6, [7, 5] ] ]
return list[2]
def a():
	list = [0 ,[ 6, 3], [4, 6, [7, 5] ] ]
	return list[2](len(list[2])-1][1]
def a():
	return list[2](len(list[2])-1][1]
def a():
	list = [0 ,[ 6, 3], [4, 6, [7, 5] ] ]
	return list[2][len(list[2])-1][1]
print(a)
print(a())
def a():
	list = [1,2,3,4,5]
	return list[index:index+3]+list[:len(list)-index]
print(a())
def a():
	list = [1,2,3,4,5]
	index = 3
	return list[index:index+3]+list[:len(list)-index]
print(a())
def a():
	list = [1,2,3,4,5]
	index = 3
	return list[index+3:]+list[:len(list)-index]
print(a())
def a():
	list = [1,2,3,4,5]
	index = 3
	return list[index:]+list[:index+3]
def a():
print(a())
def a():
	list = [1,2,3,4,5]
	index = 3
	return list[index:index+3]+list[:max(0,-1*(len(list)-index-3))]
print(a())
def a():
	list = [1,2,3,4,5]
	index = 4
	return list[index:index+3]+list[:max(0,-1*(len(list)-index-3))]
print(a())
def a():
	list = [1,2,3,4,5]
	return list[len(list)]
print(a())
list = [1,2,3]
len(list)
list[3]
